var capacitorContacts = (function (exports, core) {
    'use strict';

    // declare module "@capacitor/core" {
    //   interface PluginRegistry {
    //     Contacts: ContactsPlugin;
    //   }
    // }
    exports.ContactType = void 0;
    (function (ContactType) {
        ContactType[ContactType["Person"] = 0] = "Person";
        ContactType[ContactType["Organization"] = 1] = "Organization";
    })(exports.ContactType || (exports.ContactType = {}));

    const Contacts$1 = core.registerPlugin('Contacts', {
        web: () => Promise.resolve().then(function () { return web; }).then(m => new m.ContactsPluginWeb()),
    });

    class ContactsPluginWeb extends core.WebPlugin {
        constructor() {
            super();
        }
        async getPermissions() {
            throw this.unimplemented('getPermissions - Not implemented on web.');
        }
        async getContacts() {
            throw this.unimplemented('getContacts - Not implemented on web.');
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        async saveContact(_) {
            throw this.unimplemented('saveContact - Not implemented on web.');
        }
    }
    const Contacts = new ContactsPluginWeb();

    var web = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ContactsPluginWeb: ContactsPluginWeb,
        Contacts: Contacts
    });

    exports.Contacts = Contacts$1;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}, capacitorExports));
//# sourceMappingURL=plugin.js.map
